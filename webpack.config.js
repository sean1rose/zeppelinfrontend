var webpack = require('webpack');
var path = require('path');

// for every js file generated by webpack, auto generates injects necessary scripts (created from codesplitting bundle from vendor files) injects into index.html template and then outputs new html into dist directory...
var HtmlWebpackPlugin = require('html-webpack-plugin');

// array of strings of each vendor library we want to include in this separate vendor file (code splitting) (and not include in bundle)
  // get this list from package.json dependencies list
const VENDOR_LIBS = [
  'react', 'react-dom'
];

/* 
A. need to add babel & styling pipeline
  1. babel-loader
  2. .babelrc (or "babel" in package.json) to tell babel what (pieces of syntax to transform/presets to use) - (es2015, react and stage2)
  3. css loader - allows wp to understand contents of css files imported into our project
  4. style loader - takes css modules and sticks into styles tag in html
  x. don't use extracttextplugin
B. code splitting vendor dependencies -> split up code base so that vendors are separate (can cache vendor libraries since theoretically not updated as often)
  1. entry point consist of both a 'bundle' and a 'vendor' bundle
  2. change output filename to use '[name].js', which replaces with keyname ([bundle].js or [vendor].js)
  @ but those vendor files haven't yet been removed from index.js so that they're only included 1 time
    -> *need to use 'CommonsChunkPlugin' - tells webpack to look at total sum of file entry pts, and if any modules are dupes pull them out and only add them to vendor entry pt
      - create a 3rd file - manifest.js file; tells browser whether vendor file has changed
  3. use 'HtmlWebpackPlugin' so don't have to manually maintain index.html w/ all the necessary split up scripts
  4. use [chunkhash] to bust the hash -> everytime bundle/vendor file is changed, name of file (aka the chunkhash) will slightly change (so no longer cached by browser; will re-d/l it)
  5. use "rimraf" npm package to clear out dist directory before each build
*/

module.exports = {
  entry: {
    bundle: './src/index.js',
    vendor: VENDOR_LIBS
  },
  output: {
    path: path.join(__dirname, 'dist'),
    filename: '[name].[chunkhash].js'
  },
  module: {
    rules: [
      {
        use: 'babel-loader',
        test: /\.js$/,
        exclude: /node_modules/
      },
      {
        use: ['style-loader', 'css-loader'],
        test: /\.css$/
      }
    ]
  },
  plugins: [
    new webpack.optimize.CommonsChunkPlugin({
      names: ['vendor', 'manifest']
    }),
    new HtmlWebpackPlugin({
      template: 'src/index.html'
    }),
    new webpack.DefinePlugin({
      'process.env': {
        NODE_ENV: JSON.stringify(process.env.NODE_ENV)
      },
      API_URL: JSON.stringify(process.env.API_URL)
    })
  ]
};